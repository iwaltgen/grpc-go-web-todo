// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: todo/v1/todo_service.proto

package todov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListTodosRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTodosRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListTodosRequestValidationError is the validation error returned by
// ListTodosRequest.Validate if the designated constraints aren't met.
type ListTodosRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodosRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodosRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodosRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodosRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodosRequestValidationError) ErrorName() string { return "ListTodosRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTodosRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodosRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodosRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodosRequestValidationError{}

// Validate checks the field values on ListTodosResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTodosResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTodos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTodosResponseValidationError{
					field:  fmt.Sprintf("Todos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTodosResponseValidationError is the validation error returned by
// ListTodosResponse.Validate if the designated constraints aren't met.
type ListTodosResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodosResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodosResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodosResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodosResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodosResponseValidationError) ErrorName() string {
	return "ListTodosResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTodosResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodosResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodosResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodosResponseValidationError{}

// Validate checks the field values on CreateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateTodoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTodo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTodoRequestValidationError{
				field:  "Todo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTodoRequestValidationError is the validation error returned by
// CreateTodoRequest.Validate if the designated constraints aren't met.
type CreateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoRequestValidationError) ErrorName() string {
	return "CreateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoRequestValidationError{}

// Validate checks the field values on UpdateTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateTodoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTodo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTodoRequestValidationError{
				field:  "Todo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateTodoRequestValidationError is the validation error returned by
// UpdateTodoRequest.Validate if the designated constraints aren't met.
type UpdateTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoRequestValidationError) ErrorName() string {
	return "UpdateTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoRequestValidationError{}

// Validate checks the field values on DeleteTodoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteTodoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TodoId

	return nil
}

// DeleteTodoRequestValidationError is the validation error returned by
// DeleteTodoRequest.Validate if the designated constraints aren't met.
type DeleteTodoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTodoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTodoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTodoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTodoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTodoRequestValidationError) ErrorName() string {
	return "DeleteTodoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTodoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTodoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTodoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTodoRequestValidationError{}

// Validate checks the field values on SubscribeEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SubscribeEventRequestValidationError is the validation error returned by
// SubscribeEventRequest.Validate if the designated constraints aren't met.
type SubscribeEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeEventRequestValidationError) ErrorName() string {
	return "SubscribeEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeEventRequestValidationError{}

// Validate checks the field values on SubscribeEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SubscribeEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Event

	if v, ok := interface{}(m.GetTodo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeEventResponseValidationError{
				field:  "Todo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SubscribeEventResponseValidationError is the validation error returned by
// SubscribeEventResponse.Validate if the designated constraints aren't met.
type SubscribeEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeEventResponseValidationError) ErrorName() string {
	return "SubscribeEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeEventResponseValidationError{}
