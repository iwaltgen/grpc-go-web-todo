// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo/v1/todo_service.proto

package todov1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListTodosRequest struct {
}

func (m *ListTodosRequest) Reset()      { *m = ListTodosRequest{} }
func (*ListTodosRequest) ProtoMessage() {}
func (*ListTodosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{0}
}
func (m *ListTodosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTodosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTodosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTodosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTodosRequest.Merge(m, src)
}
func (m *ListTodosRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTodosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTodosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTodosRequest proto.InternalMessageInfo

type ListTodosResponse struct {
	Todos []*Todo `protobuf:"bytes,1,rep,name=todos,proto3" json:"todos,omitempty"`
}

func (m *ListTodosResponse) Reset()      { *m = ListTodosResponse{} }
func (*ListTodosResponse) ProtoMessage() {}
func (*ListTodosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{1}
}
func (m *ListTodosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTodosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTodosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTodosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTodosResponse.Merge(m, src)
}
func (m *ListTodosResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTodosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTodosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTodosResponse proto.InternalMessageInfo

func (m *ListTodosResponse) GetTodos() []*Todo {
	if m != nil {
		return m.Todos
	}
	return nil
}

type CreateTodoRequest struct {
	Todo *Todo `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *CreateTodoRequest) Reset()      { *m = CreateTodoRequest{} }
func (*CreateTodoRequest) ProtoMessage() {}
func (*CreateTodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{2}
}
func (m *CreateTodoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTodoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTodoRequest.Merge(m, src)
}
func (m *CreateTodoRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTodoRequest proto.InternalMessageInfo

func (m *CreateTodoRequest) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type UpdateTodoRequest struct {
	Todo *Todo `protobuf:"bytes,1,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *UpdateTodoRequest) Reset()      { *m = UpdateTodoRequest{} }
func (*UpdateTodoRequest) ProtoMessage() {}
func (*UpdateTodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{3}
}
func (m *UpdateTodoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTodoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTodoRequest.Merge(m, src)
}
func (m *UpdateTodoRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTodoRequest proto.InternalMessageInfo

func (m *UpdateTodoRequest) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

type DeleteTodoRequest struct {
	TodoId string `protobuf:"bytes,1,opt,name=todo_id,json=todoId,proto3" json:"todo_id,omitempty"`
}

func (m *DeleteTodoRequest) Reset()      { *m = DeleteTodoRequest{} }
func (*DeleteTodoRequest) ProtoMessage() {}
func (*DeleteTodoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{4}
}
func (m *DeleteTodoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteTodoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteTodoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteTodoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTodoRequest.Merge(m, src)
}
func (m *DeleteTodoRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteTodoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTodoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTodoRequest proto.InternalMessageInfo

func (m *DeleteTodoRequest) GetTodoId() string {
	if m != nil {
		return m.TodoId
	}
	return ""
}

type SubscribeEventRequest struct {
	Events []Event `protobuf:"varint,1,rep,packed,name=events,proto3,enum=todo.v1.Event" json:"events,omitempty"`
}

func (m *SubscribeEventRequest) Reset()      { *m = SubscribeEventRequest{} }
func (*SubscribeEventRequest) ProtoMessage() {}
func (*SubscribeEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{5}
}
func (m *SubscribeEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeEventRequest.Merge(m, src)
}
func (m *SubscribeEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeEventRequest proto.InternalMessageInfo

func (m *SubscribeEventRequest) GetEvents() []Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type SubscribeEventResponse struct {
	Event Event `protobuf:"varint,1,opt,name=event,proto3,enum=todo.v1.Event" json:"event,omitempty"`
	Todo  *Todo `protobuf:"bytes,2,opt,name=todo,proto3" json:"todo,omitempty"`
}

func (m *SubscribeEventResponse) Reset()      { *m = SubscribeEventResponse{} }
func (*SubscribeEventResponse) ProtoMessage() {}
func (*SubscribeEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c2b56474e9a8146, []int{6}
}
func (m *SubscribeEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeEventResponse.Merge(m, src)
}
func (m *SubscribeEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeEventResponse proto.InternalMessageInfo

func (m *SubscribeEventResponse) GetEvent() Event {
	if m != nil {
		return m.Event
	}
	return EVENT_UNSPECIFIED
}

func (m *SubscribeEventResponse) GetTodo() *Todo {
	if m != nil {
		return m.Todo
	}
	return nil
}

func init() {
	proto.RegisterType((*ListTodosRequest)(nil), "todo.v1.ListTodosRequest")
	proto.RegisterType((*ListTodosResponse)(nil), "todo.v1.ListTodosResponse")
	proto.RegisterType((*CreateTodoRequest)(nil), "todo.v1.CreateTodoRequest")
	proto.RegisterType((*UpdateTodoRequest)(nil), "todo.v1.UpdateTodoRequest")
	proto.RegisterType((*DeleteTodoRequest)(nil), "todo.v1.DeleteTodoRequest")
	proto.RegisterType((*SubscribeEventRequest)(nil), "todo.v1.SubscribeEventRequest")
	proto.RegisterType((*SubscribeEventResponse)(nil), "todo.v1.SubscribeEventResponse")
}

func init() { proto.RegisterFile("todo/v1/todo_service.proto", fileDescriptor_1c2b56474e9a8146) }

var fileDescriptor_1c2b56474e9a8146 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x4f, 0xc2, 0x40,
	0x14, 0xc7, 0x7b, 0x28, 0x18, 0x1e, 0x91, 0xc8, 0x19, 0x15, 0x3b, 0x9c, 0x58, 0x8d, 0x71, 0x30,
	0x45, 0x30, 0x51, 0x07, 0x13, 0x13, 0xd4, 0xc1, 0xc4, 0x09, 0x64, 0x71, 0x21, 0x40, 0x6f, 0x68,
	0x62, 0x5a, 0xec, 0x95, 0xce, 0x7e, 0x04, 0x3f, 0x86, 0x1f, 0xc5, 0x11, 0x37, 0x46, 0x39, 0x16,
	0x47, 0x3e, 0x82, 0xb9, 0xbb, 0xd2, 0x02, 0x85, 0xc1, 0x89, 0xdc, 0xfb, 0xff, 0x7f, 0xf7, 0xee,
	0xbd, 0x3f, 0x05, 0xdd, 0x77, 0x2d, 0xb7, 0x1c, 0x54, 0xca, 0xe2, 0xb7, 0xc5, 0xa8, 0x17, 0xd8,
	0x5d, 0x6a, 0xf6, 0x3c, 0xd7, 0x77, 0xf1, 0x86, 0xa8, 0x99, 0x41, 0x45, 0xc7, 0x53, 0x53, 0xdf,
	0xb1, 0x7d, 0x25, 0xc6, 0x35, 0x69, 0x52, 0xb5, 0xed, 0x69, 0x8d, 0x06, 0xd4, 0x09, 0x8d, 0x06,
	0x86, 0xad, 0x27, 0x9b, 0xf9, 0xcf, 0xae, 0xe5, 0xb2, 0x3a, 0x7d, 0xeb, 0x53, 0xe6, 0x1b, 0xd7,
	0x50, 0x98, 0xa9, 0xb1, 0x9e, 0xeb, 0x30, 0x8a, 0x8f, 0x20, 0x2d, 0x78, 0x56, 0x44, 0xa5, 0xb5,
	0xd3, 0x5c, 0x75, 0xd3, 0x0c, 0xdb, 0x9b, 0xc2, 0x56, 0x57, 0x9a, 0x71, 0x09, 0x85, 0x3b, 0x8f,
	0xb6, 0x7d, 0x2a, 0x8b, 0xea, 0x3a, 0x7c, 0x08, 0xeb, 0x42, 0x2d, 0xa2, 0x12, 0x4a, 0x82, 0x52,
	0x12, 0x5c, 0xb3, 0x67, 0xfd, 0x9f, 0x3b, 0x83, 0xc2, 0x3d, 0x7d, 0xa5, 0xf3, 0xdc, 0x1e, 0xc8,
	0xd5, 0xb4, 0x6c, 0x4b, 0xa2, 0xd9, 0x7a, 0x46, 0x1c, 0x1f, 0x2d, 0xe3, 0x16, 0x76, 0x1a, 0xfd,
	0x0e, 0xeb, 0x7a, 0x76, 0x87, 0x3e, 0x88, 0x1d, 0x4c, 0x89, 0x13, 0xc8, 0xc8, 0x9d, 0xa8, 0xe1,
	0xf2, 0xd5, 0x7c, 0xd4, 0x4b, 0xd9, 0x42, 0xd5, 0x68, 0xc3, 0xee, 0xe2, 0x05, 0xe1, 0x76, 0x8e,
	0x21, 0x2d, 0x3d, 0xb2, 0x63, 0xf2, 0x02, 0x25, 0x46, 0x13, 0xa5, 0x56, 0x4e, 0x54, 0xfd, 0x4e,
	0x41, 0x4e, 0x1c, 0x1b, 0x2a, 0x6b, 0x5c, 0x83, 0x6c, 0x94, 0x05, 0xde, 0x8f, 0x88, 0xc5, 0xcc,
	0x74, 0x7d, 0x99, 0x14, 0x3e, 0xee, 0x0a, 0x20, 0x4e, 0x05, 0xc7, 0xce, 0x44, 0x54, 0x7a, 0xfc,
	0xa4, 0xa6, 0x63, 0xfb, 0x02, 0x8c, 0x63, 0x99, 0x01, 0x13, 0x59, 0x2d, 0x01, 0xe3, 0x5c, 0x66,
	0xc0, 0x44, 0x58, 0x8b, 0x60, 0x03, 0xf2, 0xf3, 0x1b, 0xc6, 0x24, 0x32, 0x2c, 0xcd, 0x4e, 0x3f,
	0x58, 0xa9, 0xab, 0xe9, 0xcf, 0x51, 0xed, 0x66, 0x30, 0x22, 0xda, 0x70, 0x44, 0xb4, 0xc9, 0x88,
	0xa0, 0x77, 0x4e, 0xd0, 0x27, 0x27, 0xe8, 0x8b, 0x13, 0x34, 0xe0, 0x04, 0xfd, 0x70, 0x82, 0x7e,
	0x39, 0xd1, 0x26, 0x9c, 0xa0, 0x8f, 0x31, 0xd1, 0x06, 0x63, 0xa2, 0x0d, 0xc7, 0x44, 0x7b, 0x91,
	0xff, 0x9a, 0xa0, 0xd2, 0xc9, 0xc8, 0x0f, 0xe5, 0xe2, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xbd,
	0x54, 0x4f, 0x8c, 0x03, 0x00, 0x00,
}

func (this *ListTodosRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTodosRequest)
	if !ok {
		that2, ok := that.(ListTodosRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ListTodosResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTodosResponse)
	if !ok {
		that2, ok := that.(ListTodosResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Todos) != len(that1.Todos) {
		return false
	}
	for i := range this.Todos {
		if !this.Todos[i].Equal(that1.Todos[i]) {
			return false
		}
	}
	return true
}
func (this *CreateTodoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTodoRequest)
	if !ok {
		that2, ok := that.(CreateTodoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Todo.Equal(that1.Todo) {
		return false
	}
	return true
}
func (this *UpdateTodoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTodoRequest)
	if !ok {
		that2, ok := that.(UpdateTodoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Todo.Equal(that1.Todo) {
		return false
	}
	return true
}
func (this *DeleteTodoRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteTodoRequest)
	if !ok {
		that2, ok := that.(DeleteTodoRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TodoId != that1.TodoId {
		return false
	}
	return true
}
func (this *SubscribeEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeEventRequest)
	if !ok {
		that2, ok := that.(SubscribeEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if this.Events[i] != that1.Events[i] {
			return false
		}
	}
	return true
}
func (this *SubscribeEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeEventResponse)
	if !ok {
		that2, ok := that.(SubscribeEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	if !this.Todo.Equal(that1.Todo) {
		return false
	}
	return true
}
func (this *ListTodosRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&todov1.ListTodosRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTodosResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&todov1.ListTodosResponse{")
	if this.Todos != nil {
		s = append(s, "Todos: "+fmt.Sprintf("%#v", this.Todos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateTodoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&todov1.CreateTodoRequest{")
	if this.Todo != nil {
		s = append(s, "Todo: "+fmt.Sprintf("%#v", this.Todo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTodoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&todov1.UpdateTodoRequest{")
	if this.Todo != nil {
		s = append(s, "Todo: "+fmt.Sprintf("%#v", this.Todo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteTodoRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&todov1.DeleteTodoRequest{")
	s = append(s, "TodoId: "+fmt.Sprintf("%#v", this.TodoId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeEventRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&todov1.SubscribeEventRequest{")
	s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeEventResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&todov1.SubscribeEventResponse{")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	if this.Todo != nil {
		s = append(s, "Todo: "+fmt.Sprintf("%#v", this.Todo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTodoService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TodoServiceClient interface {
	ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*ListTodosResponse, error)
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Unit, error)
	UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Unit, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*Unit, error)
	SubscribeEvent(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (TodoService_SubscribeEventClient, error)
}

type todoServiceClient struct {
	cc *grpc.ClientConn
}

func NewTodoServiceClient(cc *grpc.ClientConn) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*ListTodosResponse, error) {
	out := new(ListTodosResponse)
	err := c.cc.Invoke(ctx, "/todo.v1.TodoService/ListTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, "/todo.v1.TodoService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, "/todo.v1.TodoService/UpdateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, "/todo.v1.TodoService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) SubscribeEvent(ctx context.Context, in *SubscribeEventRequest, opts ...grpc.CallOption) (TodoService_SubscribeEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TodoService_serviceDesc.Streams[0], "/todo.v1.TodoService/SubscribeEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceSubscribeEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_SubscribeEventClient interface {
	Recv() (*SubscribeEventResponse, error)
	grpc.ClientStream
}

type todoServiceSubscribeEventClient struct {
	grpc.ClientStream
}

func (x *todoServiceSubscribeEventClient) Recv() (*SubscribeEventResponse, error) {
	m := new(SubscribeEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
type TodoServiceServer interface {
	ListTodos(context.Context, *ListTodosRequest) (*ListTodosResponse, error)
	CreateTodo(context.Context, *CreateTodoRequest) (*Unit, error)
	UpdateTodo(context.Context, *UpdateTodoRequest) (*Unit, error)
	DeleteTodo(context.Context, *DeleteTodoRequest) (*Unit, error)
	SubscribeEvent(*SubscribeEventRequest, TodoService_SubscribeEventServer) error
}

// UnimplementedTodoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (*UnimplementedTodoServiceServer) ListTodos(ctx context.Context, req *ListTodosRequest) (*ListTodosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}
func (*UnimplementedTodoServiceServer) CreateTodo(ctx context.Context, req *CreateTodoRequest) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (*UnimplementedTodoServiceServer) UpdateTodo(ctx context.Context, req *UpdateTodoRequest) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (*UnimplementedTodoServiceServer) DeleteTodo(ctx context.Context, req *DeleteTodoRequest) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (*UnimplementedTodoServiceServer) SubscribeEvent(req *SubscribeEventRequest, srv TodoService_SubscribeEventServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvent not implemented")
}

func RegisterTodoServiceServer(s *grpc.Server, srv TodoServiceServer) {
	s.RegisterService(&_TodoService_serviceDesc, srv)
}

func _TodoService_ListTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.v1.TodoService/ListTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).ListTodos(ctx, req.(*ListTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.v1.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.v1.TodoService/UpdateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodo(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.v1.TodoService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_SubscribeEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).SubscribeEvent(m, &todoServiceSubscribeEventServer{stream})
}

type TodoService_SubscribeEventServer interface {
	Send(*SubscribeEventResponse) error
	grpc.ServerStream
}

type todoServiceSubscribeEventServer struct {
	grpc.ServerStream
}

func (x *todoServiceSubscribeEventServer) Send(m *SubscribeEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TodoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todo.v1.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTodos",
			Handler:    _TodoService_ListTodos_Handler,
		},
		{
			MethodName: "CreateTodo",
			Handler:    _TodoService_CreateTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodoService_UpdateTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoService_DeleteTodo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvent",
			Handler:       _TodoService_SubscribeEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo/v1/todo_service.proto",
}

func (m *ListTodosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTodosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTodosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ListTodosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTodosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTodosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Todos) > 0 {
		for iNdEx := len(m.Todos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Todos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTodoService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateTodoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTodoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTodoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Todo != nil {
		{
			size, err := m.Todo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTodoService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTodoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTodoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTodoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Todo != nil {
		{
			size, err := m.Todo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTodoService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteTodoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTodoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteTodoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TodoId) > 0 {
		i -= len(m.TodoId)
		copy(dAtA[i:], m.TodoId)
		i = encodeVarintTodoService(dAtA, i, uint64(len(m.TodoId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		dAtA4 := make([]byte, len(m.Events)*10)
		var j3 int
		for _, num := range m.Events {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTodoService(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Todo != nil {
		{
			size, err := m.Todo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTodoService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != 0 {
		i = encodeVarintTodoService(dAtA, i, uint64(m.Event))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTodoService(dAtA []byte, offset int, v uint64) int {
	offset -= sovTodoService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListTodosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ListTodosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Todos) > 0 {
		for _, e := range m.Todos {
			l = e.Size()
			n += 1 + l + sovTodoService(uint64(l))
		}
	}
	return n
}

func (m *CreateTodoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Todo != nil {
		l = m.Todo.Size()
		n += 1 + l + sovTodoService(uint64(l))
	}
	return n
}

func (m *UpdateTodoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Todo != nil {
		l = m.Todo.Size()
		n += 1 + l + sovTodoService(uint64(l))
	}
	return n
}

func (m *DeleteTodoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TodoId)
	if l > 0 {
		n += 1 + l + sovTodoService(uint64(l))
	}
	return n
}

func (m *SubscribeEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		l = 0
		for _, e := range m.Events {
			l += sovTodoService(uint64(e))
		}
		n += 1 + sovTodoService(uint64(l)) + l
	}
	return n
}

func (m *SubscribeEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != 0 {
		n += 1 + sovTodoService(uint64(m.Event))
	}
	if m.Todo != nil {
		l = m.Todo.Size()
		n += 1 + l + sovTodoService(uint64(l))
	}
	return n
}

func sovTodoService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTodoService(x uint64) (n int) {
	return sovTodoService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListTodosRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTodosRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ListTodosResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTodos := "[]*Todo{"
	for _, f := range this.Todos {
		repeatedStringForTodos += strings.Replace(fmt.Sprintf("%v", f), "Todo", "Todo", 1) + ","
	}
	repeatedStringForTodos += "}"
	s := strings.Join([]string{`&ListTodosResponse{`,
		`Todos:` + repeatedStringForTodos + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTodoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTodoRequest{`,
		`Todo:` + strings.Replace(fmt.Sprintf("%v", this.Todo), "Todo", "Todo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTodoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTodoRequest{`,
		`Todo:` + strings.Replace(fmt.Sprintf("%v", this.Todo), "Todo", "Todo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteTodoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteTodoRequest{`,
		`TodoId:` + fmt.Sprintf("%v", this.TodoId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeEventRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeEventRequest{`,
		`Events:` + fmt.Sprintf("%v", this.Events) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeEventResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeEventResponse{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`Todo:` + strings.Replace(fmt.Sprintf("%v", this.Todo), "Todo", "Todo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTodoService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListTodosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTodosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTodosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTodosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTodosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTodosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Todos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodoService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTodoService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Todos = append(m.Todos, &Todo{})
			if err := m.Todos[len(m.Todos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTodoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTodoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTodoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Todo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodoService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTodoService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Todo == nil {
				m.Todo = &Todo{}
			}
			if err := m.Todo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTodoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTodoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTodoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Todo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodoService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTodoService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Todo == nil {
				m.Todo = &Todo{}
			}
			if err := m.Todo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTodoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTodoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTodoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodoService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTodoService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TodoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Event
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTodoService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Event(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Events = append(m.Events, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTodoService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTodoService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTodoService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Events) == 0 {
					m.Events = make([]Event, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Event
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTodoService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Event(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Events = append(m.Events, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= Event(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Todo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodoService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTodoService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Todo == nil {
				m.Todo = &Todo{}
			}
			if err := m.Todo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodoService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodoService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTodoService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTodoService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTodoService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTodoService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTodoService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTodoService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTodoService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTodoService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTodoService = fmt.Errorf("proto: unexpected end of group")
)
