// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: todo/v1/todo.proto

package todov1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Todo struct {
	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Completed   bool             `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`
	ModifiedAt  *types.Timestamp `protobuf:"bytes,4,opt,name=modified_at,json=modifiedAt,proto3" json:"modified_at,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Todo) Reset()      { *m = Todo{} }
func (*Todo) ProtoMessage() {}
func (*Todo) Descriptor() ([]byte, []int) {
	return fileDescriptor_11d45a766fba6e0b, []int{0}
}
func (m *Todo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Todo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Todo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Todo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Todo.Merge(m, src)
}
func (m *Todo) XXX_Size() int {
	return m.Size()
}
func (m *Todo) XXX_DiscardUnknown() {
	xxx_messageInfo_Todo.DiscardUnknown(m)
}

var xxx_messageInfo_Todo proto.InternalMessageInfo

func (m *Todo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Todo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Todo) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

func (m *Todo) GetModifiedAt() *types.Timestamp {
	if m != nil {
		return m.ModifiedAt
	}
	return nil
}

func (m *Todo) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Todo)(nil), "todo.v1.Todo")
}

func init() { proto.RegisterFile("todo/v1/todo.proto", fileDescriptor_11d45a766fba6e0b) }

var fileDescriptor_11d45a766fba6e0b = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x7d, 0xa1, 0x14, 0xe2, 0x48, 0x0c, 0x9e, 0xa2, 0x0a, 0x1d, 0x11, 0x53, 0xa6, 0x44,
	0x81, 0x09, 0xc1, 0x52, 0x1e, 0x21, 0xea, 0xc4, 0x82, 0xd2, 0xd8, 0xad, 0x2c, 0x35, 0x5c, 0x94,
	0x9a, 0xcc, 0x3c, 0x02, 0x8f, 0xc1, 0xa3, 0x30, 0xa1, 0x8c, 0x1d, 0x89, 0xb3, 0x30, 0xf6, 0x11,
	0x50, 0x13, 0x22, 0xd8, 0x98, 0x6c, 0xfd, 0xf7, 0xfd, 0xa7, 0x4f, 0xc7, 0x85, 0x21, 0x49, 0x71,
	0x9d, 0xc4, 0x87, 0x37, 0x2a, 0x2b, 0x32, 0x24, 0x4e, 0xfa, 0x7f, 0x9d, 0xcc, 0x2e, 0xd6, 0x44,
	0xeb, 0x8d, 0x8a, 0xfb, 0x78, 0xf9, 0xbc, 0x8a, 0x8d, 0x2e, 0xd4, 0xd6, 0x64, 0x45, 0x39, 0x90,
	0x97, 0x1f, 0xc0, 0x27, 0x0b, 0x92, 0x24, 0xce, 0xb8, 0xa3, 0xa5, 0x0f, 0x01, 0x84, 0x6e, 0xea,
	0x68, 0x29, 0x02, 0xee, 0x49, 0xb5, 0xcd, 0x2b, 0x5d, 0x1a, 0x4d, 0x4f, 0xbe, 0xd3, 0x0f, 0xfe,
	0x46, 0xe2, 0x9c, 0xbb, 0x39, 0x15, 0xe5, 0x46, 0x19, 0x25, 0xfd, 0xa3, 0x00, 0xc2, 0xd3, 0xf4,
	0x37, 0x10, 0xb7, 0xdc, 0x2b, 0x48, 0xea, 0x95, 0x56, 0xf2, 0x31, 0x33, 0xfe, 0x24, 0x80, 0xd0,
	0xbb, 0x9a, 0x45, 0x83, 0x4f, 0x34, 0xfa, 0x44, 0x8b, 0xd1, 0x27, 0xe5, 0x23, 0x3e, 0x37, 0xe2,
	0x86, 0xf3, 0xbc, 0x52, 0x99, 0x19, 0xba, 0xc7, 0xff, 0x76, 0xdd, 0x1f, 0x7a, 0x6e, 0xee, 0xef,
	0x9a, 0x16, 0xd9, 0xae, 0x45, 0xb6, 0x6f, 0x11, 0x5e, 0x2c, 0xc2, 0x9b, 0x45, 0x78, 0xb7, 0x08,
	0x8d, 0x45, 0xf8, 0xb4, 0x08, 0x5f, 0x16, 0xd9, 0xde, 0x22, 0xbc, 0x76, 0xc8, 0x9a, 0x0e, 0xd9,
	0xae, 0x43, 0xf6, 0x30, 0x3d, 0x1c, 0xac, 0x4e, 0x96, 0xd3, 0x7e, 0xf9, 0xf5, 0x77, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0a, 0x87, 0xd0, 0xff, 0x55, 0x01, 0x00, 0x00,
}

func (this *Todo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Todo)
	if !ok {
		that2, ok := that.(Todo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Completed != that1.Completed {
		return false
	}
	if !this.ModifiedAt.Equal(that1.ModifiedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *Todo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&todov1.Todo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Completed: "+fmt.Sprintf("%#v", this.Completed)+",\n")
	if this.ModifiedAt != nil {
		s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTodo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Todo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Todo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Todo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTodo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ModifiedAt != nil {
		{
			size, err := m.ModifiedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTodo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Completed {
		i--
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTodo(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTodo(dAtA []byte, offset int, v uint64) int {
	offset -= sovTodo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Todo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTodo(uint64(l))
	}
	if m.Completed {
		n += 2
	}
	if m.ModifiedAt != nil {
		l = m.ModifiedAt.Size()
		n += 1 + l + sovTodo(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTodo(uint64(l))
	}
	return n
}

func sovTodo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTodo(x uint64) (n int) {
	return sovTodo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Todo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Todo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Completed:` + fmt.Sprintf("%v", this.Completed) + `,`,
		`ModifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.ModifiedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTodo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Todo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Todo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Todo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTodo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTodo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTodo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModifiedAt == nil {
				m.ModifiedAt = &types.Timestamp{}
			}
			if err := m.ModifiedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTodo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTodo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTodo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTodo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTodo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTodo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTodo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTodo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTodo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTodo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTodo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTodo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTodo = fmt.Errorf("proto: unexpected end of group")
)
