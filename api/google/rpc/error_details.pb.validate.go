// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: google/rpc/error_details.proto

package errdetails

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RetryInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RetryInfo) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRetryDelay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetryInfoValidationError{
				field:  "RetryDelay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RetryInfoValidationError is the validation error returned by
// RetryInfo.Validate if the designated constraints aren't met.
type RetryInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetryInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetryInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetryInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetryInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetryInfoValidationError) ErrorName() string { return "RetryInfoValidationError" }

// Error satisfies the builtin error interface
func (e RetryInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetryInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetryInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetryInfoValidationError{}

// Validate checks the field values on DebugInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DebugInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Detail

	return nil
}

// DebugInfoValidationError is the validation error returned by
// DebugInfo.Validate if the designated constraints aren't met.
type DebugInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebugInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebugInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebugInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebugInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebugInfoValidationError) ErrorName() string { return "DebugInfoValidationError" }

// Error satisfies the builtin error interface
func (e DebugInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebugInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebugInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebugInfoValidationError{}

// Validate checks the field values on QuotaFailure with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *QuotaFailure) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetViolations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuotaFailureValidationError{
					field:  fmt.Sprintf("Violations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// QuotaFailureValidationError is the validation error returned by
// QuotaFailure.Validate if the designated constraints aren't met.
type QuotaFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaFailureValidationError) ErrorName() string { return "QuotaFailureValidationError" }

// Error satisfies the builtin error interface
func (e QuotaFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaFailureValidationError{}

// Validate checks the field values on ErrorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ErrorInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Reason

	// no validation rules for Domain

	// no validation rules for Metadata

	return nil
}

// ErrorInfoValidationError is the validation error returned by
// ErrorInfo.Validate if the designated constraints aren't met.
type ErrorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorInfoValidationError) ErrorName() string { return "ErrorInfoValidationError" }

// Error satisfies the builtin error interface
func (e ErrorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorInfoValidationError{}

// Validate checks the field values on PreconditionFailure with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PreconditionFailure) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetViolations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreconditionFailureValidationError{
					field:  fmt.Sprintf("Violations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PreconditionFailureValidationError is the validation error returned by
// PreconditionFailure.Validate if the designated constraints aren't met.
type PreconditionFailureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreconditionFailureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreconditionFailureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreconditionFailureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreconditionFailureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreconditionFailureValidationError) ErrorName() string {
	return "PreconditionFailureValidationError"
}

// Error satisfies the builtin error interface
func (e PreconditionFailureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreconditionFailure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreconditionFailureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreconditionFailureValidationError{}

// Validate checks the field values on BadRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BadRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFieldViolations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BadRequestValidationError{
					field:  fmt.Sprintf("FieldViolations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BadRequestValidationError is the validation error returned by
// BadRequest.Validate if the designated constraints aren't met.
type BadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadRequestValidationError) ErrorName() string { return "BadRequestValidationError" }

// Error satisfies the builtin error interface
func (e BadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadRequestValidationError{}

// Validate checks the field values on RequestInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RequestInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	// no validation rules for ServingData

	return nil
}

// RequestInfoValidationError is the validation error returned by
// RequestInfo.Validate if the designated constraints aren't met.
type RequestInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestInfoValidationError) ErrorName() string { return "RequestInfoValidationError" }

// Error satisfies the builtin error interface
func (e RequestInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestInfoValidationError{}

// Validate checks the field values on ResourceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResourceType

	// no validation rules for ResourceName

	// no validation rules for Owner

	// no validation rules for Description

	return nil
}

// ResourceInfoValidationError is the validation error returned by
// ResourceInfo.Validate if the designated constraints aren't met.
type ResourceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceInfoValidationError) ErrorName() string { return "ResourceInfoValidationError" }

// Error satisfies the builtin error interface
func (e ResourceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceInfoValidationError{}

// Validate checks the field values on Help with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Help) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HelpValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// HelpValidationError is the validation error returned by Help.Validate if the
// designated constraints aren't met.
type HelpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HelpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HelpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HelpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HelpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HelpValidationError) ErrorName() string { return "HelpValidationError" }

// Error satisfies the builtin error interface
func (e HelpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HelpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HelpValidationError{}

// Validate checks the field values on LocalizedMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LocalizedMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Locale

	// no validation rules for Message

	return nil
}

// LocalizedMessageValidationError is the validation error returned by
// LocalizedMessage.Validate if the designated constraints aren't met.
type LocalizedMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalizedMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalizedMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalizedMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalizedMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalizedMessageValidationError) ErrorName() string { return "LocalizedMessageValidationError" }

// Error satisfies the builtin error interface
func (e LocalizedMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalizedMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalizedMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalizedMessageValidationError{}

// Validate checks the field values on QuotaFailure_Violation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QuotaFailure_Violation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Subject

	// no validation rules for Description

	return nil
}

// QuotaFailure_ViolationValidationError is the validation error returned by
// QuotaFailure_Violation.Validate if the designated constraints aren't met.
type QuotaFailure_ViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuotaFailure_ViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuotaFailure_ViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuotaFailure_ViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuotaFailure_ViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuotaFailure_ViolationValidationError) ErrorName() string {
	return "QuotaFailure_ViolationValidationError"
}

// Error satisfies the builtin error interface
func (e QuotaFailure_ViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuotaFailure_Violation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuotaFailure_ViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuotaFailure_ViolationValidationError{}

// Validate checks the field values on PreconditionFailure_Violation with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PreconditionFailure_Violation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Subject

	// no validation rules for Description

	return nil
}

// PreconditionFailure_ViolationValidationError is the validation error
// returned by PreconditionFailure_Violation.Validate if the designated
// constraints aren't met.
type PreconditionFailure_ViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreconditionFailure_ViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreconditionFailure_ViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreconditionFailure_ViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreconditionFailure_ViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreconditionFailure_ViolationValidationError) ErrorName() string {
	return "PreconditionFailure_ViolationValidationError"
}

// Error satisfies the builtin error interface
func (e PreconditionFailure_ViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreconditionFailure_Violation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreconditionFailure_ViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreconditionFailure_ViolationValidationError{}

// Validate checks the field values on BadRequest_FieldViolation with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BadRequest_FieldViolation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Field

	// no validation rules for Description

	return nil
}

// BadRequest_FieldViolationValidationError is the validation error returned by
// BadRequest_FieldViolation.Validate if the designated constraints aren't met.
type BadRequest_FieldViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BadRequest_FieldViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BadRequest_FieldViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BadRequest_FieldViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BadRequest_FieldViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BadRequest_FieldViolationValidationError) ErrorName() string {
	return "BadRequest_FieldViolationValidationError"
}

// Error satisfies the builtin error interface
func (e BadRequest_FieldViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBadRequest_FieldViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BadRequest_FieldViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BadRequest_FieldViolationValidationError{}

// Validate checks the field values on Help_Link with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Help_Link) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Description

	// no validation rules for Url

	return nil
}

// Help_LinkValidationError is the validation error returned by
// Help_Link.Validate if the designated constraints aren't met.
type Help_LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Help_LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Help_LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Help_LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Help_LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Help_LinkValidationError) ErrorName() string { return "Help_LinkValidationError" }

// Error satisfies the builtin error interface
func (e Help_LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHelp_Link.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Help_LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Help_LinkValidationError{}
